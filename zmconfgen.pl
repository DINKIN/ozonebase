#!/usr/bin/perl -w
#
# ==========================================================================
#
# Zone Minder Configuration Script, $Date: 2011-01-22 00:07:07 +0000 (Sat, 22 Jan 2011) $, $Revision: 3247 $
# Copyright (C) 2001-2008  Philip Coombes
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# ==========================================================================
#
# This script is used to generate initial config headers and database data.
#

use strict;
use lib './scripts/ZoneMinder/lib';
use ZoneMinder::ConfigData qw/:data/;

$| = 1;

my $configHeader = "src/zmConfigDefines.h";
my $configSql = "db/createDatabase.sql";

generateConfigFiles();

exit;

sub generateConfigFiles
{
    generateConfigHeader();
    generateConfigSQL();
}

sub generateConfigHeader
{
    print( "Generating '$configHeader'\n" );
    open( CFG_HDR_FILE, ">$configHeader" ) or die( "Can't open '$configHeader' for writing" );
    print( CFG_HDR_FILE "// The file is autogenerated by zmconfgen.pl\n" );
    print( CFG_HDR_FILE "// Do not edit this file as any changes will be overwritten\n\n" );
    my $lastId = 0;
    my $defineList = "";
    my $declareList = "";
    my $assignList = "";
    foreach my $option ( @options )
    {
        next if ( !defined($option->{id}) );

        my $optId = $option->{id};
        my $optName = $option->{name};
        my $optType = $option->{type};
        my $varName = substr( lc($optName), 3 );

        $defineList .= sprintf( "#define $optName $optId\n" );

        $declareList .= sprintf( "    " );
        if ( $optType->{db_type} eq 'boolean' )
        {
            $declareList .= sprintf( "bool " );
        }
        elsif ( $optType->{db_type} eq 'integer' || $optType->{db_type} eq 'hexadecimal' )
        {
            $declareList .= sprintf( "int " );
        }
        elsif ( $optType->{db_type} eq 'decimal' )
        {
            $declareList .= sprintf( "double " );
        }
        else
        {
            $declareList .= sprintf( "const char *" );
        }
        $declareList .= sprintf( $varName.";\\\n" );

        $assignList .= sprintf( "    " );
        $assignList .= sprintf( $varName." = " );
        if ( $optType->{db_type} eq 'boolean' )
        {
            $assignList .= sprintf( "(bool)" );
        }
        elsif ( $optType->{db_type} eq 'integer' || $optType->{db_type} eq 'hexadecimal' )
        {
            $assignList .= sprintf( "(int)" );
        }
        elsif ( $optType->{db_type} eq 'decimal' )
        {
            $assignList .= sprintf( "(double) " );
        }
        else
        {
            $assignList .= sprintf( "(const char *)" );
        }
        $assignList .= sprintf( "config.Item( ".$optName." );\\\n" );

        $lastId = $option->{id};
    }
    print( CFG_HDR_FILE $defineList."\n\n" );
    print( CFG_HDR_FILE "#define ZM_MAX_CFG_ID $lastId\n\n" );
    print( CFG_HDR_FILE "#define ZM_CFG_DECLARE_LIST \\\n" );
    print( CFG_HDR_FILE $declareList."\n\n" );
    print( CFG_HDR_FILE "#define ZM_CFG_ASSIGN_LIST \\\n" );
    print( CFG_HDR_FILE $assignList."\n\n" );
    close( CFG_HDR_FILE );
}

sub generateConfigSQL
{
    print( "Updating '$configSql'\n" );
    my $configSqlTemp = $configSql.".temp";
    open( CFG_SQL_FILE, "<$configSql" ) or die( "Can't open '$configSql' for reading" );
    open( CFG_TEMP_SQL_FILE, ">$configSqlTemp" ) or die( "Can't open '$configSqlTemp' for writing" );
    while ( my $line = <CFG_SQL_FILE> )
    {
        last if ( $line =~ /^-- This section is autogenerated/ );
        print( CFG_TEMP_SQL_FILE $line );
    }
    close( CFG_SQL_FILE );

    print( CFG_TEMP_SQL_FILE "-- This section is autogenerated by zmconfgen.pl\n" );
    print( CFG_TEMP_SQL_FILE "-- Do not edit this file as any changes will be overwritten\n" );
    print( CFG_TEMP_SQL_FILE "--\n\n" );
    print( CFG_TEMP_SQL_FILE "delete from Config;\n\n" );
    foreach my $option ( @options )
    {
        #print( $option->{name}."\n" ) if ( !$option->{category} );
        $option->{db_type} = $option->{type}->{db_type};
        $option->{db_hint} = $option->{type}->{hint};
        $option->{db_pattern} = $option->{type}->{pattern};
        $option->{db_format} = $option->{type}->{format};
        if ( $option->{db_type} eq "boolean" )
        {
            $option->{db_value} = ($option->{value} eq "yes")?"1":"0";
        }
        else
        {
            $option->{db_value} = $option->{value};
        }
        if ( $option->{name} eq "ZM_DYN_CURR_VERSION" || $option->{name} eq "ZM_DYN_DB_VERSION" )
        {
            $option->{db_value} = '2.0.0a';
        }
        if ( my $requires = $option->{requires} )
        {
            $option->{db_requires} = join( ";", map { my $value = $_->{value}; $value = ($value eq "yes")?1:0 if ( $options_hash{$_->{name}}->{db_type} eq "boolean" ); ( "$_->{name}=$value" ) } @$requires );
        }
        else
        {
            $option->{db_requires} = "";
        }
        printf( CFG_TEMP_SQL_FILE
            "insert into Config set Id = %d, Name = '%s', Value = '%s', Type = '%s', DefaultValue = '%s', Hint = '%s', Pattern = '%s', Format = '%s', Prompt = '%s', Help = '%s', Category = '%s', Readonly = '%s', Requires = '%s';\n",
            $option->{id},
            $option->{name},
            addSlashes($option->{db_value}),
            $option->{db_type},
            addSlashes($option->{default}),
            addSlashes($option->{db_hint}),
            addSlashes($option->{db_pattern}),
            addSlashes($option->{db_format}),
            addSlashes($option->{description}),
            addSlashes($option->{help}),
            $option->{category},
            $option->{readonly}?1:0,
            $option->{db_requires}
        );
    }
    print( CFG_TEMP_SQL_FILE "\n" );
    close( CFG_TEMP_SQL_FILE );

    rename( $configSqlTemp, $configSql ) or die( "Can't rename '$configSqlTemp' to '$configSql': $!" );
}

sub addSlashes
{
    my $string = shift;
    $string =~ s|(['"])|\\$1|g;
    return( $string );
}
